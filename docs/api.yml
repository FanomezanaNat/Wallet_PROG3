openapi: '3.0.2'
info:
  title: Wallet management
  version: '1.0'
servers:
  - url: https://wallet.com
tags:
  - name: "currency"
  - name: "account"
  - name: "transaction"
paths:
  /currency:
    get:
      tags:
        - "currency"
      summary: get All currencies
      operationId: getCurrencies
      responses:
        '200':
          description: successfully retrieved currencies
          content:
             application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/currency"
          '500':
          $ref: "#/components/responses/500"
    post:
      tags:
        - "currency"
      summary: Create a currency
      operationId: createCurrency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/currency"
      responses:
        '200':
          description: Currency created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/currency"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - "currency"
      summary:  Update a currency
      operationId: CrupdateCurrency
      parameters:
        - name: id
          in: query
          required: true
          description: ID of the currency to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/currency"
      responses:
        '200':
          description: Currency updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/currency"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account:
    get:
      tags:
        - "account"
      summary: Get All accounts
      operationId: getAccounts
      responses:
        '200':
          description: Successfully retrieved accounts
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/account"
          '500':
          $ref: "#/components/responses/500"
    post:
      tags:
        - "account"
      summary: Create an account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - "account"
      summary: Update an account
      operationId: updateAccount
      parameters:
        - name: id
          in: query
          required: true
          description: ID of the account to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /transaction:
    get:
      tags:
        - "transaction"
      summary: Get All transactions
      operationId: getTransactions
      responses:
        '200':
          description: Successfully retrieved transactions
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/transaction"

    post:
      tags:
        - "transaction"
      summary: Create a transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transaction"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"

    put:
      tags:
        - "transaction"
      summary: Update a transaction
      operationId: updateTransaction
      parameters:
        - name: id
          in: query
          required: true
          description: ID of the transaction to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transaction"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"


components:
  schemas:
    currency:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        type:
          type: string
    account:
      type: object
      properties:
        id:
          type: integer
        idCurrency: 
          type: string
          format: uuid
    transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        transactionDate:
          type: string
          format: datetime
        amount:
          type: integer
        idAccount:
          type: integer
    Exception:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
    BadRequestException:
          allOf:
            - $ref: '#/components/schemas/Exception'
          example:
            type: BadRequestException
            message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    InternalServerException:
        allOf:
          - $ref: '#/components/schemas/Exception'
        example:
          type: InternalServerException
          message: Unexpected error   
    status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    body:
      type: object
    APIresponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/status"
        body:
          $ref: "#/components/schemas/body"
    Response200:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
  responses:
    '200':
      $ref: "#/components/schemas/Response200"
    '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    '403':
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotAuthorizedException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'