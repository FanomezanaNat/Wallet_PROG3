openapi: '3.0.3'
info:
  title: Wallet management
  version: '4.1'
  description: this documentation describes the information about a wallet that we've done 
servers:
  - url: https://wallet.v1.com
tags:
  - name: "currency"
  - name: "account"
  - name: "transaction"
  - name: "transferHistory"
paths:
  /currency:
    get:
      tags:
        - "currency"
      summary: get All currencies
      operationId: getCurrencies
      responses:
        '200':
          description: successfully retrieved currencies
          content:
             application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/currency"
          '500':
          $ref: "#/components/responses/500"
    post:
      tags:
        - "currency"
      summary: Create a currency
      operationId: createCurrency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/currency"
      responses:
        '200':
          description: Currency created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/currency"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account:
    get:
      tags:
        - "account"
      summary: Get All accounts
      operationId: getAccounts
      responses:
        '200':
          description: Successfully retrieved accounts
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/account"
          '500':
          $ref: "#/components/responses/500"
    post:
      tags:
        - "account"
      summary: Create an account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /transaction:
    get:
      tags:
        - "transaction"
      summary: Get All transactions
      operationId: getTransactions
      responses:
        '200':
          description: Successfully retrieved transactions
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/transaction"

    post:
      tags:
        - "transaction"
      summary: Create a transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transaction"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /currency/{id}:
    put:
      tags:
        - "currency"
      summary:  Update  currency by id
      operationId: CrupdateCurrency
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the currency to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/currency"
      responses:
        '200':
          description: Currency updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/currency"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /acount/{id}:
     put:
      tags:
        - "account"
      summary: Update an account
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the account to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /transaction/{id}:
    put:
      tags:
        - "transaction"
      summary: Update a transaction
      operationId: updateTransaction
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the transaction to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transaction"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account/{accountId}/balance:
    get:
      tags:
        - "account"
      summary: Get account balance at a specific date
      operationId: getBalanceAtDate
      parameters:
        - name: accountId
          in: path
          required: true
          description: ID of the account
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          required: true
          description: Date for the account balance
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully retrieved account balance at date
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: double
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account/{accountId}/balance/history:
    get:
      tags:
        - "account"
      summary: Get account balance history within a period
      operationId: getBalanceHistory
      parameters:
        - name: accountId
          in: path
          required: true
          description: ID of the account
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          required: true
          description: Start date for balance history
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          required: true
          description: End date for balance history
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully retrieved account balance history within the period
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: double
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account/{accountId}/transactions:
    post:
      tags:
        - "account"
      summary: Perform a transaction for the account
      operationId: performTransaction
      parameters:
        - name: accountId
          in: path
          required: true
          description: ID of the account
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  format: uuid
                amount:
                  type: number
      responses:
        '200':
          description: Transaction performed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account/{sourceAccountId}/transfer:
    post:
      tags:
        - "account"
      summary: Transfer money between accounts
      operationId: transferMoney
      parameters:
        - name: sourceAccountId
          in: path
          required: true
          description: ID of the source account
          schema:
            type: string
            format: uuid
        - name: destinationAccountId
          in: query
          required: true
          description: ID of the destination account
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                category:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Money transferred successfully between accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  sourceAccount:
                    $ref: "#/components/schemas/account"
                  destinationAccount:
                    $ref: "#/components/schemas/account"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /account/{accountId}/balance/exchange:
    get:
      tags:
        - "account"
      summary: Get account balance at a specific date with currency exchange
      operationId: getBalanceAtDateWithExchange
      parameters:
        - name: accountId
          in: path
          required: true
          description: ID of the account
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          required: true
          description: Date for the account balance
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully retrieved account balance at date with currency exchange
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /transferHistory:
    get:
      tags:
        - "transferHistory"
      summary: Get all transfer history
      operationId: getAllTransferHistory
      responses:
        '200':
          description: Successfully retrieved all transfer history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/transferHistory"
        '500':
          $ref: "#/components/responses/500"
    post:
      tags:
        - "transferHistory"
      summary: Save a transfer history entry
      operationId: saveTransferHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transferHistory"
      responses:
        '200':
          description: Transfer history entry saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transferHistory"
        '500':
          $ref: "#/components/responses/500"
  /transferHistory/{startDate}/{endDate}:
    get:
      tags:
        - "transferHistory"
      summary: Get transfer history within a date range
      operationId: getTransferHistoryInRange
      parameters:
        - name: startDate
          in: path
          required: true
          description: Start date for transfer history
          schema:
            type: string
            format: date-time
        - name: endDate
          in: path
          required: true
          description: End date for transfer history
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully retrieved transfer history within the date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/transferHistory"
        '500':
          $ref: "#/components/responses/500"
components:
  schemas:
    currency:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        type:
          type: string
        code:
          type: string
    account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: 
          type: string
        balance:
          type: integer
        updateDate:
          type: string
          format: date
        type: 
          type: string
        currency: 
          type: string  
          format: uuid
    transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        transactionDate:
          type: string
          format: date-time
        amount:
          type: number
          format: double
        category:
          type: string
          format: uuid
        account:
          type: string
          format: uuid
    categoryAmount:
      type: object
      properties:
        idAccount:
          type: string
          format: uuid
        categoryName:
          type: string
        amount:
          type: number
          format: double
    currencyValue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sourceCurrencyId:
          type: string
          format: uuid
        destinationCurrencyId:
          type: string
          format: uuid
        amount:
          type: number
          format: double
        dateEffect:
          type: string
          format: date-time
    moneyFlow:
        type: object
        properties:
          idAccount:
            type: string
            format: uuid
          totalEntrance:
            type: number
            format: double
          totalExit:
            type: number
            format: double
    transferHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        debitTransactionId:
          type: string
          format: uuid
        creditTransactionId:
          type: string
          format: uuid
        transferDate:
          type: string
          format: date-time
    Exception:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
    BadRequestException:
          allOf:
            - $ref: '#/components/schemas/Exception'
          example:
            type: BadRequestException
            message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    InternalServerException:
        allOf:
          - $ref: '#/components/schemas/Exception'
        example:
          type: InternalServerException
          message: Unexpected error   
    status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    body:
      type: object
    APIresponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/status"
        body:
          $ref: "#/components/schemas/body"
    Response200:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
  responses:
    '200':
      $ref: "#/components/schemas/Response200"
    '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    '403':
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotAuthorizedException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'